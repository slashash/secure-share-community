{
  "meta": {
    "$_GET": [
      {
        "type": "text",
        "name": "sort"
      },
      {
        "type": "text",
        "name": "dir"
      },
      {
        "type": "text",
        "options": {
          "rules": {
            "core:required": {}
          }
        },
        "name": "secret_id"
      }
    ]
  },
  "exec": {
    "steps": [
      {
        "name": "",
        "module": "auth",
        "action": "restrict",
        "options": {
          "provider": "security",
          "permissions": [
            "admin"
          ],
          "loginUrl": "/",
          "forbiddenUrl": "/403-forbidden"
        }
      },
      {
        "name": "",
        "module": "core",
        "action": "trycatch",
        "options": {
          "try": {
            "steps": [
              {
                "name": "qUsers",
                "module": "dbupdater",
                "action": "custom",
                "options": {
                  "connection": "db",
                  "sql": {
                    "query": "SELECT MU.user_id, MU.first_name, MU.last_name, MU.is_admin, CASE WHEN pub_key IS NULL OR pub_key = '' THEN 0 ELSE 1 END AS pub_key, case when A.id is not null then 1 else 0 end as shared_message \nFROM m_user AS MU \nleft join t_shared_secrets A on A.secret_id = :P2 and A.owner_id = :P1 AND A.user_id = MU.user_id\nWHERE MU.user_id <> :P1 and MU.deleted_on is null\norder BY first_name asc ;",
                    "params": [
                      {
                        "name": ":P1",
                        "value": "{{identity}}",
                        "test": "5a8a1a1d-1b6c-49a9-9286-3c150161a76f"
                      },
                      {
                        "name": ":P2",
                        "value": "{{$_GET.secret_id}}",
                        "test": "81c33825-7aed-402c-bd3b-54ac077da480"
                      }
                    ]
                  }
                },
                "output": true,
                "meta": [],
                "outputType": "array"
              },
              {
                "name": "xLog",
                "module": "SALog",
                "action": "CreateLog",
                "options": {
                  "connection": "db",
                  "logMode": true,
                  "inputParams": "{{$_GET.secret_id}}",
                  "outputParams": "",
                  "serverActionName": "{{$_SERVER.PATH_INFO}}",
                  "requestURL": "{{$_SERVER.BASE_URL}}",
                  "errors": "",
                  "startedOn": "{{varStartTime}}",
                  "completedOn": "{{NOW_UTC}}",
                  "remarks": "",
                  "sessionGUID": "{{varSessionGUID}}",
                  "userIdentity": "{{identity}}"
                },
                "meta": [
                  {
                    "name": "log",
                    "type": "array"
                  }
                ]
              }
            ]
          },
          "catch": {
            "steps": {
              "name": "xLogErr",
              "module": "SALog",
              "action": "CreateLog",
              "options": {
                "connection": "db",
                "logMode": true,
                "inputParams": "{{$_GET.secret_id}}",
                "outputParams": "",
                "serverActionName": "{{$_SERVER.PATH_INFO}}",
                "requestURL": "{{$_SERVER.BASE_URL}}",
                "errors": "{{$_ERROR}}",
                "startedOn": "{{varStartTime}}",
                "completedOn": "{{NOW_UTC}}",
                "remarks": "",
                "status": 500,
                "response": "{{varError}}",
                "sessionGUID": "{{varSessionGUID}}",
                "userIdentity": "{{identity}}"
              },
              "meta": [
                {
                  "name": "log",
                  "type": "array"
                }
              ]
            }
          }
        }
      }
    ]
  }
}